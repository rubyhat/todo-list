{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { defaultSchema } from './schema';\n\nvar multipleInstances = function multipleInstances(element) {\n  return document.querySelectorAll(\"input[type=\\\"\".concat(element.type, \"\\\"][name=\\\"\").concat(element.name, \"\\\"]\")).length > 1;\n};\n\nvar collectCheckedOptions = function collectCheckedOptions(element) {\n  return Array.from(element.querySelectorAll('option:checked')).concat(Array.from(document.querySelectorAll(\"input[type=\\\"\".concat(element.type, \"\\\"][name=\\\"\").concat(element.name, \"\\\"]\"))).filter(function (elem) {\n    return elem.checked;\n  })).map(function (o) {\n    return o.value;\n  });\n}; // Returns a string value for the passed array.\n//\n//   attributeValue(['', 'one', null, 'two', 'three ']) // 'one two three'\n//\n\n\nexport var attributeValue = function attributeValue() {\n  var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var value = values.filter(function (v) {\n    return v && String(v).length;\n  }).map(function (v) {\n    return v.trim();\n  }).join(' ').trim();\n  return value.length ? value : null;\n}; // Returns an array for the passed string value by splitting on whitespace.\n//\n//   attributeValues('one two three ') // ['one', 'two', 'three']\n//\n\nexport var attributeValues = function attributeValues(value) {\n  if (!value) return [];\n  if (!value.length) return [];\n  return value.split(' ').filter(function (v) {\n    return v.trim().length;\n  });\n}; // Extracts attributes from a DOM element.\n//\n\nexport var extractElementAttributes = function extractElementAttributes(element) {\n  var attrs = Array.from(element.attributes).reduce(function (memo, attr) {\n    memo[attr.name] = attr.value;\n    return memo;\n  }, {});\n  attrs.checked = !!element.checked;\n  attrs.selected = !!element.selected;\n  attrs.tag_name = element.tagName;\n\n  if (element.tagName.match(/select/i) || multipleInstances(element)) {\n    var collectedOptions = collectCheckedOptions(element);\n    attrs.values = collectedOptions;\n    attrs.value = collectedOptions.join(',');\n  } else {\n    attrs.value = element.value;\n\n    if (element.tagName.match(/select/i)) {\n      if (element.selectedIndex > -1) {\n        attrs.value = element.options[element.selectedIndex].value;\n      }\n    }\n  }\n\n  return attrs;\n}; // Extracts the dataset of an element and combines it with the data attributes from all parents if requested.\n//\n\nexport var extractElementDataset = function extractElementDataset(element) {\n  var datasetAttribute = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var attrs = extractDataAttributes(element) || {};\n  var dataset = datasetAttribute && element.attributes[datasetAttribute];\n\n  if (dataset && dataset.value === 'combined') {\n    var parent = element.parentElement;\n\n    while (parent) {\n      attrs = _objectSpread(_objectSpread({}, extractDataAttributes(parent)), attrs);\n      parent = parent.parentElement;\n    }\n  }\n\n  return attrs;\n}; // Extracts all data attributes from a DOM element.\n//\n\nexport var extractDataAttributes = function extractDataAttributes(element) {\n  var attrs = {};\n\n  if (element && element.attributes) {\n    Array.from(element.attributes).forEach(function (attr) {\n      if (attr.name.startsWith('data-')) {\n        attrs[attr.name] = attr.value;\n      }\n    });\n  }\n\n  return attrs;\n}; // Finds an element based on the passed represention of the DOM element's attributes.\n//\n// NOTE: This is the same set of attributes extrated via extractElementAttributes and forwarded to the server side reflex.\n// SEE: stimulate()\n// SEE: StimulusReflex::Channel#broadcast_morph\n// SEE: StimulusReflex::Channel#broadcast_error\n//\n\nexport var findElement = function findElement(attributes) {\n  attributes = attributes || {};\n  var elements = [];\n  var selectors = [];\n\n  if (attributes.id) {\n    elements = document.querySelectorAll(\"#\".concat(attributes.id));\n  } else {\n    for (var key in attributes) {\n      if (key.includes('.')) continue;\n      if (key === 'tagName') continue;\n      if (key === 'value') continue;\n      if (key === 'values') continue;\n      if (key === 'checked') continue;\n      if (key === 'selected') continue;\n      if (key === 'data-controller' && attributes[key] === 'stimulus-reflex') continue;\n      if (key === 'data-action' && attributes[key].includes('#__perform')) continue;\n      if (!Object.prototype.hasOwnProperty.call(attributes, key)) continue;\n      selectors.push(\"[\".concat(key, \"=\\\"\").concat(attributes[key], \"\\\"]\"));\n    }\n\n    try {\n      elements = document.querySelectorAll(selectors.join(''));\n    } catch (error) {\n      console.error('StimulusReflex encountered an error identifying the Stimulus element. Consider adding an #id to the element.', error, {\n        'CSS selector': selectors.join(''),\n        attributes: attributes\n      });\n    }\n  }\n\n  if (elements.length === 0) console.warn('StimulusReflex was unable to find an element that matches the signature of the element which triggered this Reflex. Lifecycle callbacks and events cannot be raised unless your elements have distinguishing characteristics. Consider adding an #id or a randomized data-key to the element.', {\n    'CSS selector': selectors.join(''),\n    attributes: attributes\n  });\n  if (elements.length > 1) console.warn('StimulusReflex found multiple identical elements that match the signature of the element which triggered this Reflex. Lifecycle callbacks and events cannot be raised unless your elements have distinguishing characteristics. Consider adding an #id or a randomized data-key to the element.', {\n    'CSS selector': selectors.join(''),\n    attributes: attributes\n  });\n  return elements.length === 1 ? elements[0] : null;\n};","map":null,"metadata":{},"sourceType":"module"}