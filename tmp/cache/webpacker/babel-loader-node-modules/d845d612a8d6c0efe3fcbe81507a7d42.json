{"ast":null,"code":"import { camelize } from './utils'; // Invokes a lifecycle method on a StimulusReflex controller.\n//\n// - stage - the lifecycle stage\n//   * before\n//   * success\n//   * error\n//   * halted\n//   * after\n//\n// - element - the element that triggered the reflex (not necessarily the Stimulus controller's element)\n//\n\nvar invokeLifecycleMethod = function invokeLifecycleMethod(stage, element) {\n  if (!element || !element.reflexData) return;\n  var controller = element.reflexController;\n  var reflex = element.reflexData.target;\n  var reflexMethodName = reflex.split('#')[1];\n  var specificLifecycleMethodName = ['before', 'after'].includes(stage) ? \"\".concat(stage).concat(camelize(reflexMethodName)) : \"\".concat(camelize(reflexMethodName, false)).concat(camelize(stage));\n  var specificLifecycleMethod = controller[specificLifecycleMethodName];\n  var genericLifecycleMethodName = ['before', 'after'].includes(stage) ? \"\".concat(stage, \"Reflex\") : \"reflex\".concat(camelize(stage));\n  var genericLifecycleMethod = controller[genericLifecycleMethodName];\n\n  if (typeof specificLifecycleMethod === 'function') {\n    setTimeout(function () {\n      return specificLifecycleMethod.call(controller, element, reflex, element.reflexError);\n    });\n  }\n\n  if (typeof genericLifecycleMethod === 'function') {\n    setTimeout(function () {\n      return genericLifecycleMethod.call(controller, element, reflex, element.reflexError);\n    });\n  } // lifecycle cleanup\n\n\n  if (stage === 'after') {\n    delete element.reflexController;\n    delete element.reflexData;\n    delete element.reflexError;\n  }\n};\n\ndocument.addEventListener('stimulus-reflex:before', function (event) {\n  return invokeLifecycleMethod('before', event.target);\n}, true);\ndocument.addEventListener('stimulus-reflex:success', function (event) {\n  invokeLifecycleMethod('success', event.target);\n  dispatchLifecycleEvent('after', event.target);\n}, true);\ndocument.addEventListener('stimulus-reflex:selector', function (event) {\n  invokeLifecycleMethod('success', event.target);\n  dispatchLifecycleEvent('after', event.target);\n}, true);\ndocument.addEventListener('stimulus-reflex:nothing', function (event) {\n  invokeLifecycleMethod('success', event.target);\n  dispatchLifecycleEvent('after', event.target);\n}, true);\ndocument.addEventListener('stimulus-reflex:error', function (event) {\n  invokeLifecycleMethod('error', event.target);\n  dispatchLifecycleEvent('after', event.target);\n}, true);\ndocument.addEventListener('stimulus-reflex:halted', function (event) {\n  return invokeLifecycleMethod('halted', event.target);\n}, true);\ndocument.addEventListener('stimulus-reflex:after', function (event) {\n  return invokeLifecycleMethod('after', event.target);\n}, true); // Dispatches a lifecycle event on document\n//\n// - stage - the lifecycle stage\n//   * before\n//   * success\n//   * error\n//   * halted\n//   * after\n//\n// - element - the element that triggered the reflex (not necessarily the Stimulus controller's element)\n//\n\nexport var dispatchLifecycleEvent = function dispatchLifecycleEvent(stage, element) {\n  if (!element) return;\n\n  var _ref = element.reflexData || {},\n      target = _ref.target;\n\n  element.dispatchEvent(new CustomEvent(\"stimulus-reflex:\".concat(stage), {\n    bubbles: true,\n    cancelable: false,\n    detail: {\n      reflex: target,\n      controller: element.reflexController\n    }\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}